{"version":3,"file":"perform-compile.js","sourceRoot":"","sources":["../../../../packages/compiler-cli/src/perform-compile.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isSyntaxError, syntaxError} from '@angular/compiler';\nimport {createBundleIndexHost} from '@angular/tsc-wrapped';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as api from './transformers/api';\nimport * as ng from './transformers/entry_points';\n\nconst TS_EXT = /\\.ts$/;\n\nexport type Diagnostics = Array<ts.Diagnostic|api.Diagnostic>;\n\nfunction isTsDiagnostic(diagnostic: any): diagnostic is ts.Diagnostic {\n  return diagnostic && (diagnostic.file || diagnostic.messageText);\n}\n\nexport function formatDiagnostics(options: api.CompilerOptions, diags: Diagnostics): string {\n  if (diags && diags.length) {\n    const tsFormatHost: ts.FormatDiagnosticsHost = {\n      getCurrentDirectory: () => options.basePath || process.cwd(),\n      getCanonicalFileName: fileName => fileName,\n      getNewLine: () => ts.sys.newLine\n    };\n    return diags\n        .map(d => {\n          if (isTsDiagnostic(d)) {\n            return ts.formatDiagnostics([d], tsFormatHost);\n          } else {\n            let res = ts.DiagnosticCategory[d.category];\n            if (d.span) {\n              res +=\n                  ` at ${d.span.start.file.url}(${d.span.start.line + 1},${d.span.start.col + 1})`;\n            }\n            if (d.span && d.span.details) {\n              res += `: ${d.span.details}, ${d.message}\\n`;\n            } else {\n              res += `: ${d.message}\\n`;\n            }\n            return res;\n          }\n        })\n        .join();\n  } else\n    return '';\n}\n\nexport interface ParsedConfiguration {\n  options: api.CompilerOptions;\n  rootNames: string[];\n  errors: Diagnostics;\n}\n\nexport function calcProjectFileAndBasePath(project: string):\n    {projectFile: string, basePath: string} {\n  const projectIsDir = fs.lstatSync(project).isDirectory();\n  const projectFile = projectIsDir ? path.join(project, 'tsconfig.json') : project;\n  const projectDir = projectIsDir ? project : path.dirname(project);\n  const basePath = path.resolve(process.cwd(), projectDir);\n  return {projectFile, basePath};\n}\n\nexport function createNgCompilerOptions(\n    basePath: string, config: any, tsOptions: ts.CompilerOptions): api.CompilerOptions {\n  return {...tsOptions, ...config.angularCompilerOptions, genDir: basePath, basePath};\n}\n\nexport function readConfiguration(\n    project: string, existingOptions?: ts.CompilerOptions): ParsedConfiguration {\n  try {\n    const {projectFile, basePath} = calcProjectFileAndBasePath(project);\n\n    let {config, error} = ts.readConfigFile(projectFile, ts.sys.readFile);\n\n    if (error) {\n      return {errors: [error], rootNames: [], options: {}};\n    }\n    const parseConfigHost = {\n      useCaseSensitiveFileNames: true,\n      fileExists: fs.existsSync,\n      readDirectory: ts.sys.readDirectory,\n      readFile: ts.sys.readFile\n    };\n    const parsed =\n        ts.parseJsonConfigFileContent(config, parseConfigHost, basePath, existingOptions);\n    const rootNames = parsed.fileNames.map(f => path.normalize(f));\n\n    const options = createNgCompilerOptions(basePath, config, parsed.options);\n    return {rootNames, options, errors: parsed.errors};\n  } catch (e) {\n    const errors: Diagnostics = [{\n      category: ts.DiagnosticCategory.Error,\n      message: e.stack,\n    }];\n    return {errors, rootNames: [], options: {}};\n  }\n}\n\nexport function performCompilation(\n    rootNames: string[], options: api.CompilerOptions, host?: api.CompilerHost,\n    oldProgram?: api.Program): {\n  program?: api.Program,\n  emitResult?: api.EmitResult,\n  diagnostics: Diagnostics,\n} {\n  const [major, minor] = ts.version.split('.');\n\n  if (Number(major) < 2 || (Number(major) === 2 && Number(minor) < 3)) {\n    throw new Error('Must use TypeScript > 2.3 to have transformer support');\n  }\n\n  const allDiagnostics: Diagnostics = [];\n\n  function checkDiagnostics(diags: Diagnostics | undefined) {\n    if (diags) {\n      allDiagnostics.push(...diags);\n      return diags.every(d => d.category !== ts.DiagnosticCategory.Error);\n    }\n    return true;\n  }\n\n  let program: api.Program|undefined;\n  let emitResult: api.EmitResult|undefined;\n  try {\n    if (!host) {\n      host = ng.createNgCompilerHost({options});\n    }\n\n    program = ng.createProgram({rootNames, host, options, oldProgram});\n\n    let shouldEmit = true;\n    // Check parameter diagnostics\n    shouldEmit = shouldEmit && checkDiagnostics([\n                   ...program !.getTsOptionDiagnostics(), ...program !.getNgOptionDiagnostics()\n                 ]);\n\n    // Check syntactic diagnostics\n    shouldEmit = shouldEmit && checkDiagnostics(program !.getTsSyntacticDiagnostics());\n\n    // Check TypeScript semantic and Angular structure diagnostics\n    shouldEmit =\n        shouldEmit &&\n        checkDiagnostics(\n            [...program !.getTsSemanticDiagnostics(), ...program !.getNgStructuralDiagnostics()]);\n\n    // Check Angular semantic diagnostics\n    shouldEmit = shouldEmit && checkDiagnostics(program !.getNgSemanticDiagnostics());\n\n    if (shouldEmit) {\n      const emitResult = program !.emit({\n        emitFlags: api.EmitFlags.Default |\n            ((options.skipMetadataEmit || options.flatModuleOutFile) ? 0 : api.EmitFlags.Metadata)\n      });\n      allDiagnostics.push(...emitResult.diagnostics);\n    }\n  } catch (e) {\n    let errMsg: string;\n    if (isSyntaxError(e)) {\n      // don't report the stack for syntax errors as they are well known errors.\n      errMsg = e.message;\n    } else {\n      errMsg = e.stack;\n    }\n    allDiagnostics.push({\n      category: ts.DiagnosticCategory.Error,\n      message: errMsg,\n    });\n  }\n  return {program, emitResult, diagnostics: allDiagnostics};\n}"]}